#include "Mapping.h"

Mapping::Mapping(string filename){
	fileStream.open(filename.c_str(), std::ios_base::in);
	if (!fileStream){
		ExitWithError("Bad KeyPoint File");
	}
	parse();
}

void Mapping::parse(){
	//For each line: parseLine(line)
	string currentLine;
	while (getline(fileStream, currentLine)){
		std::cout << "Getting Line" << endl;
		parseLine(currentLine);
	}
}

void Mapping::parseLine(string line){
	//Holds values for current key point
	vector<int> currentKeyPoint;
	//Current integer being read in
	int currentKeyValue;
	//Holds our ExtendedKeyPoint which will be generated by the line
	ExtendedKeyPoint currentLineKeyPoints;
	line = trim(line);
	stringstream lineStream(line);
	while(lineStream >> currentKeyValue){
		currentKeyPoint.push_back(currentKeyValue);
		if(currentKeyPoint.size() == 4){
			//We have enough values to create a KeyPoint
			KeyPoint keyPoint(
					currentKeyPoint[0], currentKeyPoint[1],
					currentKeyPoint[2], currentKeyPoint[3]);
			//Add the keypoint to our ExtendedKeyPoint for the current line
			currentLineKeyPoints.addKeyPoint(keyPoint);
			std::cout << "Added KP: " <<
				keyPoint.getOriginalX() << " " << keyPoint.getOriginalY() << " " <<
				keyPoint.getDestinationX() << " "<< keyPoint.getDestinationY() << endl;
				
			//Clear the NEWEST two values to make room for the next KeyPoint
			currentKeyPoint.pop_back();
			currentKeyPoint.pop_back();
		}
	}
	//Add the ExtendedKeyPoint to extendedKeyPoints vector
	extendedKeyPoints.push_back(currentLineKeyPoints);
}

// Get rid of trailing whitespace
string Mapping::trim(string toTrim){
	if (toTrim.length() == 0)
		return "";
	while(isspace(toTrim.at(toTrim.length()-1))){
		toTrim = toTrim.substr(0, toTrim.length()-1);
		if (toTrim.length() == 0)
			return "";
	}
	return toTrim;
}

vector<ExtendedKeyPoint> Mapping::getExtendedKeyPoints(){
	return extendedKeyPoints;
}
